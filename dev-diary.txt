
YEAR 2022

MARCH

31st

Well, frontend development is just ongoing.

APRIL

1st

Costed one hour try to find an event propagation problem,
but finally found it's a matter of CSS selector.

BTW frontend can communicate with backend now.

2nd

(Formally) Started playing with Android.

Costed 4 hours to find why Java class (on android) always can't be found,
but finally realized pyjnius can't work with python thread/subprocess,
while I'm using ThreadingHTTPServer.

See "Note" around:
    https://python-for-android.readthedocs.io/en/latest/buildoptions/#webview

NEVER MISS ANY SENTENCE OF A DOCUMENT

3rd

Costed the whole day to solve WebView problem --
    it doesn't do reaction to <input type="file"> by default.

Finally done with library AdvancedWebView, but still with some hacks.

... It's now 4th 2:00 a.m. though

4th

Purged many small problems.

Wished to release it today, but no luck...

5th

Bundle script, optimized project structure.

It's finally ready...

6th

Documentation.

What else? First Release!


... ...

(some day)

Determined to make backend better,
but resulting in full rewrite.


... ... (worked hard)

15th

Feeling it's there.

Oh, asyncio always quits like a mad cat, throwing bleak there
and just ends everything, uncleanly.

16th

Solved many things left yesterday.

Thought i18n needs be universal across there, so made one by myself.

Tried to implement flip, rtl and wrap in text printing,
wasted some time, but didn't regret.

Well, slightly update document and try compiling,
give everyone a surprise.

Try --release on p4a build. It worked. 5.9MiB apk, satisfied now?
Don't forget -Djava.net.useSystemProxies=true on gradle anymore,
when a proxy to google is needed.

Phone says a release apk should be signed to be installed.
Satisfy it. https://stackoverflow.com/questions/4853011/how-to-sign-an-android-apk-file

Okay, it's 17th 3 a.m.  publish it and sleep.


... ... (doing something else)

24th

Took some misc things.

Made a minor change in `server.py`,
but resulting in MUCH faster server response...
I don't know what's the point. But it's great. Period.


... ... (went away for other ideas)

JULY

7th

In this period I've struggled about many bad things, notably Node.js.
That's the worst dev experience, ever. Darn it and luckily I didn't take it as my primary skill.

I'd tell less about; here is a place to start to know what's wrong with all of those:
    http://harmful.cat-v.org/software/

(Don't take everything serious; what really matters is the philosophy: do one thing and do it well.)

I'm trying to balance it all the way. And look that in this small project:
    how users are satisfied, average or advanced;
    how developers contributed, novice or experienced.

Here is an unseen star of the galaxy, not even comparable to the megas.
But, settling here means that we are unique, and its existence is the best gift, to the world, to everyone.

Hope the spirit will persist.

----

After seeking around, I'll go farther. In my GitHub profile Bio there is a short description.

Here in this project, I have idea: Tcl/Tk
    https://tcl.tk/

I want to make a path to communicate between that Python backend and a "better" frontend.
There's currently one, Web, but Web is too heavy in some cases, and I'm not that satisfied.
Tcl/Tk is a good choice. Python have Tkinter, but I don't go with it.

The simplest approach is shell/subprocess `python3 printer.py` at Tcl side.
Feel free to make one if you have experience & time, but I'd go in other way --

I want it through stdin/stdout of `wish`, the Tk shell.
Tk just do the UI, and echo interactions back (like when user click button, or input text)
The same can also be applied to Web, but maybe with frequent/delayed requests (or even WebSocket),
so that it become universal.
That may involve another (partial) rewrite.

Afraid not, experiment always worth it. And remember: it's all about idea, everyone can make use of then.

Yawn... bed time...
